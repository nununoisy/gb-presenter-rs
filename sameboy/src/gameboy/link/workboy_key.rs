use sameboy_sys::{GB_WORKBOY_REQUIRE_SHIFT, GB_WORKBOY_Q, GB_WORKBOY_W, GB_WORKBOY_E, GB_WORKBOY_R, GB_WORKBOY_T, GB_WORKBOY_Y, GB_WORKBOY_U, GB_WORKBOY_I, GB_WORKBOY_O, GB_WORKBOY_P, GB_WORKBOY_A, GB_WORKBOY_S, GB_WORKBOY_D, GB_WORKBOY_F, GB_WORKBOY_G, GB_WORKBOY_H, GB_WORKBOY_J, GB_WORKBOY_K, GB_WORKBOY_L, GB_WORKBOY_Z, GB_WORKBOY_X, GB_WORKBOY_C, GB_WORKBOY_V, GB_WORKBOY_B, GB_WORKBOY_N, GB_WORKBOY_M, GB_WORKBOY_1, GB_WORKBOY_2, GB_WORKBOY_3, GB_WORKBOY_4, GB_WORKBOY_5, GB_WORKBOY_6, GB_WORKBOY_7, GB_WORKBOY_8, GB_WORKBOY_9, GB_WORKBOY_0, GB_WORKBOY_CLOCK, GB_WORKBOY_TEMPERATURE, GB_WORKBOY_MONEY, GB_WORKBOY_CALCULATOR, GB_WORKBOY_DATE, GB_WORKBOY_CONVERSION, GB_WORKBOY_RECORD, GB_WORKBOY_WORLD, GB_WORKBOY_PHONE, GB_WORKBOY_ESCAPE, GB_WORKBOY_BACKSPACE, GB_WORKBOY_UNKNOWN, GB_WORKBOY_ENTER, GB_WORKBOY_SHIFT_DOWN, GB_WORKBOY_SHIFT_UP, GB_WORKBOY_LEFT, GB_WORKBOY_UP, GB_WORKBOY_DOWN, GB_WORKBOY_RIGHT, GB_WORKBOY_EXCLAMATION_MARK, GB_WORKBOY_TILDE, GB_WORKBOY_ASTERISK, GB_WORKBOY_DOLLAR, GB_WORKBOY_HASH, GB_WORKBOY_DECIMAL_POINT, GB_WORKBOY_PLUS, GB_WORKBOY_MINUS, GB_WORKBOY_NONE, GB_WORKBOY_LEFT_PARENTHESIS, GB_WORKBOY_RIGHT_PARENTHESIS, GB_WORKBOY_SEMICOLON, GB_WORKBOY_COLON, GB_WORKBOY_PERCENT, GB_WORKBOY_EQUAL, GB_WORKBOY_COMMA, GB_WORKBOY_DOT, GB_WORKBOY_LT, GB_WORKBOY_GT, GB_WORKBOY_SLASH, GB_WORKBOY_QUESTION_MARK, GB_WORKBOY_UMLAUT, GB_WORKBOY_QUOTE, GB_WORKBOY_AT};

#[derive(Debug, Copy, Clone)]
pub enum WorkboyKey {
    Clock,
    Temperature,
    Money,
    Calculator,
    Date,
    Conversion,
    Record,
    World,
    Phone,
    Escape,
    Delete,
    Insert,
    Return,
    Numbers,
    Capitals,
    Left,
    Up,
    Down,
    Right,
    MemoryAdd,
    MemorySubtract,
    MemoryRecall,
    MemoryClear,
    DecimalPoint,
    Add,
    Subtract,
    Multiply,
    Divide,
    Clear,
    Char(char)
}

impl WorkboyKey {
    pub fn scan_code(&self) -> u8 {
        match self {
            WorkboyKey::Clock => GB_WORKBOY_CLOCK as u8,
            WorkboyKey::Temperature => GB_WORKBOY_TEMPERATURE as u8,
            WorkboyKey::Money => GB_WORKBOY_MONEY as u8,
            WorkboyKey::Calculator => GB_WORKBOY_CALCULATOR as u8,
            WorkboyKey::Date => GB_WORKBOY_DATE as u8,
            WorkboyKey::Conversion => GB_WORKBOY_CONVERSION as u8,
            WorkboyKey::Record => GB_WORKBOY_RECORD as u8,
            WorkboyKey::World => GB_WORKBOY_WORLD as u8,
            WorkboyKey::Phone => GB_WORKBOY_PHONE as u8,
            WorkboyKey::Escape => GB_WORKBOY_ESCAPE as u8,
            WorkboyKey::Delete => GB_WORKBOY_BACKSPACE as u8,
            WorkboyKey::Insert => GB_WORKBOY_UNKNOWN as u8,
            WorkboyKey::Return => GB_WORKBOY_ENTER as u8,
            WorkboyKey::Numbers => GB_WORKBOY_SHIFT_DOWN as u8,
            WorkboyKey::Capitals => GB_WORKBOY_SHIFT_UP as u8,
            WorkboyKey::Left => GB_WORKBOY_LEFT as u8,
            WorkboyKey::Up => GB_WORKBOY_UP as u8,
            WorkboyKey::Down => GB_WORKBOY_DOWN as u8,
            WorkboyKey::Right => GB_WORKBOY_RIGHT as u8,
            WorkboyKey::MemoryAdd => (GB_WORKBOY_R | GB_WORKBOY_REQUIRE_SHIFT) as u8,
            WorkboyKey::MemorySubtract => (GB_WORKBOY_T | GB_WORKBOY_REQUIRE_SHIFT) as u8,
            WorkboyKey::MemoryRecall => (GB_WORKBOY_Y | GB_WORKBOY_REQUIRE_SHIFT) as u8,
            WorkboyKey::MemoryClear => (GB_WORKBOY_U | GB_WORKBOY_REQUIRE_SHIFT) as u8,
            WorkboyKey::DecimalPoint => GB_WORKBOY_DECIMAL_POINT as u8,
            WorkboyKey::Add => GB_WORKBOY_PLUS as u8,
            WorkboyKey::Subtract => GB_WORKBOY_MINUS as u8,
            WorkboyKey::Multiply => (GB_WORKBOY_H | GB_WORKBOY_REQUIRE_SHIFT) as u8,
            WorkboyKey::Divide => (GB_WORKBOY_J | GB_WORKBOY_REQUIRE_SHIFT) as u8,
            WorkboyKey::Clear => (GB_WORKBOY_M | GB_WORKBOY_REQUIRE_SHIFT) as u8,
            WorkboyKey::Char('Q') => GB_WORKBOY_Q as u8,
            WorkboyKey::Char('W') => GB_WORKBOY_W as u8,
            WorkboyKey::Char('E') => GB_WORKBOY_E as u8,
            WorkboyKey::Char('R') => GB_WORKBOY_R as u8,
            WorkboyKey::Char('T') => GB_WORKBOY_T as u8,
            WorkboyKey::Char('Y') => GB_WORKBOY_Y as u8,
            WorkboyKey::Char('U') => GB_WORKBOY_U as u8,
            WorkboyKey::Char('I') => GB_WORKBOY_I as u8,
            WorkboyKey::Char('O') => GB_WORKBOY_O as u8,
            WorkboyKey::Char('P') => GB_WORKBOY_P as u8,
            WorkboyKey::Char('A') => GB_WORKBOY_A as u8,
            WorkboyKey::Char('S') => GB_WORKBOY_S as u8,
            WorkboyKey::Char('D') => GB_WORKBOY_D as u8,
            WorkboyKey::Char('F') => GB_WORKBOY_F as u8,
            WorkboyKey::Char('G') => GB_WORKBOY_G as u8,
            WorkboyKey::Char('H') => GB_WORKBOY_H as u8,
            WorkboyKey::Char('J') => GB_WORKBOY_J as u8,
            WorkboyKey::Char('K') => GB_WORKBOY_K as u8,
            WorkboyKey::Char('L') => GB_WORKBOY_L as u8,
            WorkboyKey::Char('Z') => GB_WORKBOY_Z as u8,
            WorkboyKey::Char('X') => GB_WORKBOY_X as u8,
            WorkboyKey::Char('C') => GB_WORKBOY_C as u8,
            WorkboyKey::Char('V') => GB_WORKBOY_V as u8,
            WorkboyKey::Char('B') => GB_WORKBOY_B as u8,
            WorkboyKey::Char('N') => GB_WORKBOY_N as u8,
            WorkboyKey::Char('M') => GB_WORKBOY_M as u8,
            WorkboyKey::Char('1') => GB_WORKBOY_1 as u8,
            WorkboyKey::Char('2') => GB_WORKBOY_2 as u8,
            WorkboyKey::Char('3') => GB_WORKBOY_3 as u8,
            WorkboyKey::Char('4') => GB_WORKBOY_4 as u8,
            WorkboyKey::Char('5') => GB_WORKBOY_5 as u8,
            WorkboyKey::Char('6') => GB_WORKBOY_6 as u8,
            WorkboyKey::Char('7') => GB_WORKBOY_7 as u8,
            WorkboyKey::Char('8') => GB_WORKBOY_8 as u8,
            WorkboyKey::Char('9') => GB_WORKBOY_9 as u8,
            WorkboyKey::Char('0') => GB_WORKBOY_0 as u8,
            WorkboyKey::Char('!') => GB_WORKBOY_EXCLAMATION_MARK as u8,
            // This key functions in the software as a tilde but
            // the legend on the prototype is a pound sign.
            WorkboyKey::Char('~') | WorkboyKey::Char('Â£') => GB_WORKBOY_TILDE as u8,
            WorkboyKey::Char('*') => GB_WORKBOY_ASTERISK as u8,
            WorkboyKey::Char('$') => GB_WORKBOY_DOLLAR as u8,
            WorkboyKey::Char('#') => GB_WORKBOY_HASH as u8,
            WorkboyKey::Char('+') => GB_WORKBOY_PLUS as u8,
            WorkboyKey::Char('-') => GB_WORKBOY_MINUS as u8,
            WorkboyKey::Char('(') => GB_WORKBOY_LEFT_PARENTHESIS as u8,
            WorkboyKey::Char(')') => GB_WORKBOY_RIGHT_PARENTHESIS as u8,
            WorkboyKey::Char(';') => GB_WORKBOY_SEMICOLON as u8,
            WorkboyKey::Char(':') => GB_WORKBOY_COLON as u8,
            WorkboyKey::Char('\n') => GB_WORKBOY_ENTER as u8,
            WorkboyKey::Char('%') => GB_WORKBOY_PERCENT as u8,
            WorkboyKey::Char('=') => GB_WORKBOY_EQUAL as u8,
            WorkboyKey::Char(',') => GB_WORKBOY_COMMA as u8,
            WorkboyKey::Char('<') => GB_WORKBOY_LT as u8,
            WorkboyKey::Char('.') => GB_WORKBOY_DOT as u8,
            WorkboyKey::Char('>') => GB_WORKBOY_GT as u8,
            WorkboyKey::Char('/') => GB_WORKBOY_SLASH as u8,
            WorkboyKey::Char('?') => GB_WORKBOY_QUESTION_MARK as u8,
            WorkboyKey::Char('"') => GB_WORKBOY_UMLAUT as u8,
            WorkboyKey::Char('\'') => GB_WORKBOY_QUOTE as u8,
            WorkboyKey::Char('@') => GB_WORKBOY_AT as u8,
            WorkboyKey::Char(_) => GB_WORKBOY_NONE as u8,
        }
    }
}
