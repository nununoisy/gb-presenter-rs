import { AboutSlint, Button, ComboBox, CheckBox, SpinBox, Switch, LineEdit, VerticalBox } from "std-widgets.slint";
import { ChannelConfigView, ChannelConfig } from "./channel-config.slint";
import { ColorUtils } from "./color-picker.slint";
export { ColorUtils }

export enum InputType {
    None, LSDj, GBS, VGM
}

export component MainWindow inherits Window {
    callback browse-for-rom(bool);
    callback browse-for-sav(bool);
    callback set-lsdj-2x(bool) -> bool;
    callback browse-for-background();
    callback import-config();
    callback export-config();
    callback reset-config();
    callback update-formatted-duration();
    callback update-channel-configs(bool);
    callback update-vgm-config();
    callback start-render();
    callback cancel-render();

    in property <string> version: "?";
    in property <string> sameboy-version: "?";
    in property <string> ffmpeg-version: "?";

    in property <string> rom-path: "";
    in property <string> sav-path: "";
    in property <string> rom-path-2x: "";
    in property <string> sav-path-2x: "";
    in-out property <string> background-path: "";
    in property <bool> input-valid: false;
    in property <InputType> input-type: None;
    in-out property <int> selected-track-index: -1;
    in-out property <string> selected-track-text: "Select a track...";
    in-out property <int> selected-track-index-2x: -1;
    in-out property <string> selected-track-text-2x: "Select a track...";
    in-out property <int> selected-model-index: 6;
    in-out property <string> selected-model-text: "CGB-E";
    in-out property <string> track-duration-num: "300";
    in-out property <string> track-duration-type: "seconds";
    in property <string> track-duration-formatted: "<unknown>";
    in-out property <int> fadeout-duration: 180;
    in-out property <int> output-width: 1920;
    in-out property <int> output-height: 1080;
    in property <[string]> track-titles: [];
    in property <[string]> track-titles-2x: [];
    in-out property <int> vgm-engine-rate: 60;
    in-out property <int> vgm-tma-offset: 0;

    in-out property<[ChannelConfig]> config-lr35902: [
        { name: "Pulse 1", hidden: false, colors: [] },
        { name: "Pulse 2", hidden: false, colors: [] },
        { name: "Wave", hidden: false, colors: [] },
        { name: "Noise", hidden: false, colors: [] }
    ];
    in-out property<[ChannelConfig]> config-lr35902-2x: [
        { name: "Pulse 1", hidden: false, colors: [] },
        { name: "Pulse 2", hidden: false, colors: [] },
        { name: "Wave", hidden: false, colors: [] },
        { name: "Noise", hidden: false, colors: [] }
    ];

    in property <bool> rendering: false;
    in property <float> progress: 0.0;
    in property <string> progress-title: "Idle";
    in property <string> progress-status: "";
    in property <bool> progress-error: false;
    in property <bool> progress-indeterminate: false;

    property<float> i-progress-anim-tick: -cos(180deg * mod(animation-tick() / 1.3s, 2) / 2) + 1;
    property<bool> lsdj-2x: false;
    in property<bool> vgm-2x: false;

    public pure function is-2x() -> bool {
        (root.input-type == InputType.LSDj && root.lsdj-2x) || (root.input-type == InputType.VGM && root.vgm-2x)
    }

    title: "GBPresenter";
    icon: @image-url("gb-presenter-icon.png");

    Rectangle {
        Button {
            icon: @image-url("info.svg");
            x: parent.width - self.width - 8px;
            y: 16px;
            clicked => {
                i-about-popup.show()
            }
        }
        i-about-popup := PopupWindow {
            x: parent.width - 308px;
            y: 16px;
            width: 300px;
            height: 300px;

            Rectangle {
                background: #1c1c1c;
                border-radius: 2px;

                VerticalBox {
                    alignment: start;

                    HorizontalLayout {
                        alignment: center;
                        spacing: 8px;
                        
                        Image {
                            width: 32px;
                            source: @image-url("gb-presenter-icon.png");
                            image-rendering: pixelated;
                        }
                        Text {
                            text: "GBPresenter v" + root.version;
                            font-size: 24px;
                            vertical-alignment: center;
                        }
                    }
                    HorizontalLayout {
                        alignment: center;
                        spacing: 8px;

                        Image {
                            width: 32px;
                            height: 32px;
                            source: @image-url("sameboy-icon.png");
                        }
                        VerticalLayout {
                            alignment: center;
                            
                            Text {
                                text: "SameBoy v" + root.sameboy-version;
                                font-size: 14px;
                                horizontal-alignment: center;
                            }
                            Text {
                                text: "https://sameboy.github.io/";
                                font-size: 10px;
                                horizontal-alignment: center;
                            }
                        }
                    }
                    HorizontalLayout {
                        alignment: center;
                        spacing: 8px;

                        Image {
                            width: 32px;
                            height: 32px;
                            source: @image-url("ffmpeg-icon.png");
                        }
                        VerticalLayout {
                            alignment: center;
                            
                            Text {
                                text: "FFmpeg v" + root.ffmpeg-version;
                                font-size: 14px;
                                horizontal-alignment: center;
                            }
                            Text {
                                text: "https://ffmpeg.org/";
                                font-size: 10px;
                                horizontal-alignment: center;
                            }
                        }
                    }

                    AboutSlint {
                        preferred-height: 100px;
                    }
                    HorizontalLayout {
                        alignment: center;

                        Button { text: "Close"; }
                    }
                }
            }
        }
    }

    VerticalBox {
        alignment: start;
        spacing: 12px;
        Text {
            text: "GBPresenter";
            font-size: 32px;
            horizontal-alignment: center;
        }
        HorizontalLayout {
            alignment: stretch;
            spacing: 8px;

            Text {
                text: "Input ROM/GBS/VGM:";
                vertical-alignment: center;
            }
            LineEdit {
                enabled: false;
                text: rom-path;
                placeholder-text: "No ROM/GBS selected";
            }
            Button {
                text: "Browse...";
                enabled: !rendering;
                clicked => {
                    root.browse-for-rom(false);
                }
            }
        }
        if input-type == InputType.LSDj : HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "LSDj SAV:";
                vertical-alignment: center;
            }
            LineEdit {
                enabled: false;
                text: sav-path;
                placeholder-text: "No save selected";
            }
            Button {
                text: "Browse...";
                enabled: !rendering;
                clicked => {
                    root.browse-for-sav(false);
                }
            }
        }
        if input-type == InputType.LSDj : HorizontalLayout {
            alignment: stretch;
            spacing: 8px;

            Switch {
                text: "2x LSDj";
                enabled: !rendering;
                checked <=> root.lsdj-2x;
                toggled => {
                    root.lsdj-2x = root.set-lsdj-2x(root.lsdj-2x);
                }
            }
        }
        if input-type == InputType.LSDj && lsdj-2x : HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "2x LSDj ROM:";
                vertical-alignment: center;
            }
            LineEdit {
                enabled: false;
                text: rom-path-2x;
                placeholder-text: "No 2x LSDj ROM selected";
            }
            Button {
                text: "Browse...";
                enabled: !rendering;
                clicked => {
                    root.browse-for-rom(true);
                }
            }
        }
        if input-type == InputType.LSDj && lsdj-2x : HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "2x LSDj SAV:";
                vertical-alignment: center;
            }
            LineEdit {
                enabled: false;
                text: sav-path-2x;
                placeholder-text: "No 2x LSDj save selected";
            }
            Button {
                text: "Browse...";
                enabled: !rendering;
                clicked => {
                    root.browse-for-sav(true);
                }
            }
        }
        HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: (input-type == InputType.LSDj && lsdj-2x)
                    ? "Track 1:"
                    : "Track:";
                vertical-alignment: center;
            }
            ComboBox {
                model: track-titles;
                current-index <=> selected-track-index;
                current-value <=> selected-track-text;
                enabled: !rendering;
                selected => {
                    root.update-formatted-duration();
                }
            }
        }
        if input-type == InputType.LSDj && lsdj-2x : HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "Track 2:";
                vertical-alignment: center;
            }
            ComboBox {
                model: track-titles-2x;
                current-index <=> selected-track-index-2x;
                current-value <=> selected-track-text-2x;
                enabled: !rendering;
                selected => {
                    root.update-formatted-duration();
                }
            }
        }
        if input-type == InputType.VGM : HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            
            if vgm-2x : VerticalLayout {
                alignment: center;

                Rectangle {
                    background: #ff9800;
                    width: 24px;
                    height: 18px;
                    border-radius: 2px;

                    Text {
                        horizontal-alignment: center;
                        vertical-alignment: center;
                        text: "2x";
                        color: black;
                    }
                }
            }
            Text {
                text: "Engine rate (Hz):";
                vertical-alignment: center;
            }
            SpinBox {
                value <=> root.vgm-engine-rate;
                minimum: 1;
                maximum: 1000;
                enabled: !rendering;
                edited => {
                    root.update-vgm-config();
                }
            }
            Text {
                text: "TMA offset:";
                vertical-alignment: center;
            }
            SpinBox {
                value <=> root.vgm-tma-offset;
                minimum: -128;
                maximum: 127;
                enabled: !rendering;
                edited => {
                    root.update-vgm-config();
                }
            }
        }
        HorizontalLayout {
            alignment: end;
            spacing: 8px;
            Text {
                text: "Configuration:";
                vertical-alignment: center;
            }
            Button {
                text: "Import...";
                enabled: !rendering;
                clicked => {
                    root.import-config();
                }
            }
            Button {
                text: "Export...";
                enabled: !rendering;
                clicked => {
                    root.export-config();
                }
            }
            Button {
                text: "Reset";
                enabled: !rendering;
                clicked => {
                    root.reset-config();
                }
            }
        }
        ChannelConfigView {
            enabled: !rendering;
            active-chips: root.is-2x()
                ? ["LR35902", "LR35902 (2x)"]
                : ["LR35902"];
            config-lr35902 <=> root.config-lr35902;
            config-lr35902-2x <=> root.config-lr35902-2x;
        }
        HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "Background:";
                vertical-alignment: center;
            }
            LineEdit {
                enabled: false;
                text: background-path;
                placeholder-text: "No background selected";
            }
            Button {
                text: "Browse...";
                enabled: !rendering;
                clicked => {
                    root.browse-for-background();
                }
            }
            Button {
                text: "Clear";
                enabled: !rendering;
                clicked => {
                    root.background-path = "";
                }
            }
        }
        HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "Render duration:";
                vertical-alignment: center;
            }
            LineEdit {
                text <=> track-duration-num;
                enabled: !rendering;
                edited => {
                    root.update-formatted-duration();
                }
            }
            ComboBox {
                model: input-type == InputType.VGM ? ["seconds", "frames", "loops"]
                     : input-type == InputType.LSDj ? ["seconds", "frames", "loops"]
                     : ["seconds", "frames"];
                current-value <=> track-duration-type;
                enabled: !rendering;
                selected => {
                    root.update-formatted-duration();
                }
            }
            Text {
                text: track-duration-formatted;
                vertical-alignment: center;
                color: track-duration-formatted == "<error>"
                    ? red
                    : white;
            }
        }
        HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "Fadeout frames:";
                vertical-alignment: center;
            }
            SpinBox {
                value <=> fadeout-duration;
                minimum: 0;
                maximum: 1200;
                enabled: !rendering;
            }
        }
        HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "Output video size:";
                vertical-alignment: center;
            }
            SpinBox {
                value <=> output-width;
                minimum: 0;
                maximum: 7680;
                enabled: !rendering;
            }
            Text {
                text: "×";
                vertical-alignment: center;
            }
            SpinBox {
                value <=> output-height;
                minimum: 0;
                maximum: 4320;
                enabled: !rendering;
            }
            Button {
                text: "1080p";
                enabled: !rendering;
                clicked => {
                    output-width = 1920;
                    output-height = 1080;
                }
            }
            Button {
                text: "4K";
                enabled: !rendering;
                clicked => {
                    output-width = 3840;
                    output-height = 2160;
                }
            }
        }
        HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "GameBoy model:";
                vertical-alignment: center;
            }
            ComboBox {
                model: ["DMG-B", "CGB-0", "CGB-A", "CGB-B", "CGB-C", "CGB-D", "CGB-E", "MGB", "AGB"];
                current-index <=> selected-model-index;
                current-value <=> selected-model-text;
                enabled: !rendering;
            }
        }
        HorizontalLayout {
            alignment: center;
            Button {
                text: rendering
                    ? "Cancel"
                    : "Render!";
                primary: !rendering;
                clicked => {
                    if (rendering) {
                        root.cancel-render();
                    } else {
                        root.start-render();
                    }
                }
            }
        }

        VerticalBox {
            alignment: start;
            spacing: 8px;

            Text {
                text: root.progress-title;
                font-size: 16px;
            }
            Rectangle {
                height: 6px;
                clip: true;

                border-radius: 3px;
                background: #313131;  // Palette.neutralLighter

                if !root.progress-indeterminate: Rectangle {
                    x: 0;
                    y: 0;
                    height: parent.height;
                    width: Math.max(0.0, Math.min(root.progress, 1.0)) * parent.width;

                    border-width: 1px;
                    border-radius: 3px;
                    border-color: root.progress-error ? #bc2f32 : #60cdff;  // Palette.themePrimary
                    background: root.progress-error ? #bc2f32 : #60cdff;  // Palette.themePrimary

                    animate width {
                        duration: 100ms;
                        easing: ease-in-out;
                    }
                }
                if root.progress-indeterminate: Rectangle {
                    x: (4 * (root.i-progress-anim-tick / 1.4) - 1) * parent.width;
                    y: 0;
                    height: parent.height;
                    width: 0.5 * parent.width;

                    border-width: 1px;
                    border-radius: 3px;
                    border-color: root.i-progress-anim-tick > 1.4 ? transparent : #60cdff;  // Palette.themePrimary
                    background: root.i-progress-anim-tick > 1.4 ? transparent : #60cdff;  // Palette.themePrimary
                }
                if root.progress-indeterminate: Rectangle {
                    x: (3.1666 * ((root.i-progress-anim-tick - 0.6) / 1.4) - 1.5) * parent.width;
                    y: 0;
                    height: parent.height;
                    width: 0.8 * parent.width;

                    border-width: 1px;
                    border-radius: 3px;
                    border-color: root.i-progress-anim-tick < 0.6 ? transparent : #60cdff;  // Palette.themePrimary
                    background: root.i-progress-anim-tick < 0.6 ? transparent : #60cdff;  // Palette.themePrimary
                }
            }
            HorizontalLayout {
                alignment: start;
                spacing: 6px;

                if root.progress-error: Image {
                    colorize: #bc2f32;
                    height: 16px;
                    width: 16px;
                    source: @image-url("circle-error.svg");
                }
                Text {
                    text: root.progress-status;
                    color: root.progress-error ? #bc2f32 : #ffffff;
                    vertical-alignment: center;
                }
            }
        }
    }
}